generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  image            String?
  createdAt        DateTime        @default(now())
  emailVerified    DateTime?
  updatedAt        DateTime        @updatedAt
  accounts         Account[]
  authenticator    Authenticator[]
  receivedMessages DirectMessage[] @relation("ReceivedMessages")
  sentMessages     DirectMessage[] @relation("SentMessages")
  messages         Message[]
  sessions         Session[]
  adminRooms  Room[]    @relation("RoomAdmin")
  rooms       Room[]    @relation("RoomUsers")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  roomId    String?
  room      Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(uuid())
  receiverId  String
  senderId    String
  content     String
  createdAt   DateTime @default(now())
  read        Boolean @default(false)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Room {
  id          String    @id @default(cuid())
  name        String?
  createdAt   DateTime  @default(now())
  description String?
  image       String?
  adminId     String?
  messages    Message[]
  users       User[]    @relation("RoomUsers")
  User User[] @relation("RoomAdmin")
}

model DirectMessage {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}
